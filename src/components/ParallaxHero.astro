---
const { title, description, image, alt, fromOpacity = 0.5, toOpacity = 0 } = Astro.props;
---

<section id='parallax-section' class='relative h-[30rem] max-h-[50vw] flex flex-col gap-8 text-white'>
  <div class='absolute left-1/2 w-screen -translate-x-1/2 z-[-1] inset-0 h-full overflow-hidden'>
    <img id='parallax-image' src={image} alt={alt} class='w-full min-h-[calc(100%+100px)] object-cover -mt-[100px]' />
    <div
      class='absolute inset-0 w-full h-full bg-gradient-to-r from-black/[var(--from-opacity)] to-black/[var(--to-opacity)]'
      style={`--from-opacity: ${fromOpacity}; --to-opacity: ${toOpacity}`}
    >
    </div>
  </div>

  <h1 class='text-[2.5rem] leading-[2.5rem] font-medium'>{title}</h1>
  <p class='text-2xl max-w-[35ch] text-balance'>{description}</p>
</section>

<script>
  const section = document.getElementById('parallax-section');
  const image = document.getElementById('parallax-image');

  if (!section || !image) throw new Error('Required elements not found');

  // Obtener la distancia inicial entre el borde inferior de la sección y el viewport
  const sectionRect = section.getBoundingClientRect();
  const initialDistance = sectionRect.height + 6 * 16;

  const handleScroll = () => {
    const currentRect = section.getBoundingClientRect();

    // Calcular el progreso basado en la distancia recorrida
    const scrollProgress = Math.min(1, Math.max(0, (initialDistance - currentRect.bottom) / initialDistance));

    // Aplicar la traslación basada en el progreso
    const translation = scrollProgress * 200;
    image.style.transform = `translateY(${translation}px)`;

    console.log(initialDistance, currentRect.bottom);
  };

  window.addEventListener('scroll', handleScroll);
</script>
