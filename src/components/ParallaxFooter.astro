---
import Button from '@/components/Button.astro';
const { imageSrc, alt, title, firstButtonHref, secondButtonHref, firstButtonLabel, secondButtonLabel, align = 'center', maxChars = 22 } = Astro.props;
---

<section
  id='parallax-footer-section'
  class='relative h-[35rem] max-h-[60vw] min-h-fit flex flex-col gap-12 2lg:gap-16 justify-center'
  style={`align-items: ${align === 'left' ? 'start' : align === 'right' ? 'end' : 'center'}`}
>
  <div class='absolute left-1/2 w-screen -translate-x-1/2 z-[-1] inset-0 h-full overflow-hidden'>
    <img src={imageSrc} alt={alt} class='absolute w-full h-full lg:hidden object-cover object-center scale-[1.3] -translate-y-3' />
    <img
      id='parallax-footer-image'
      src={imageSrc}
      alt={alt}
      class='hidden lg:flex w-full h-full min-h-[calc(100%+400px)] -mt-[400px] object-cover object-center'
    />
    {title && <div class='absolute inset-0 w-full h-full bg-gradient-to-r from-black/50 lg:from-transparent to-black/50' />}
  </div>

  {
    title && (
      <>
        <h2 style={`max-width: ${maxChars}ch;`} class='text-white text-center xs:hidden'>
          {title}
        </h2>
        <h2 style={`text-align: ${align}; max-width: ${maxChars}ch;`} class='text-white hidden xs:flex'>
          {title}
        </h2>
      </>
    )
  }
  <div class=`w-full flex flex-col xs:flex-row justify-${align === 'left' ? 'start' : align === 'right' ? 'end' : 'center'} gap-3 sm:gap-4`>
    {
      firstButtonLabel && (
        <Button href={firstButtonHref} variant='secondary' class='w-full xs:w-fit'>
          {firstButtonLabel}
        </Button>
      )
    }
    {
      secondButtonLabel && (
        <Button href={secondButtonHref} class='w-full xs:w-fit'>
          {secondButtonLabel}
        </Button>
      )
    }
  </div>
</section>

<script>
  const section = document.getElementById('parallax-footer-section');
  const image = document.getElementById('parallax-footer-image');

  if (!section || !image) throw new Error('Required elements not found');

  const handleScroll = () => {
    const sectionRect = section.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const scrollProgress = Math.min(1, Math.max(0, (viewportHeight - sectionRect.top) / (viewportHeight + sectionRect.height)));
    const translation = scrollProgress * 300;
    image.style.transform = `translateY(${translation}px)`;
  };

  window.addEventListener('scroll', handleScroll);
</script>
